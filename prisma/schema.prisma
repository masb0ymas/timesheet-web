// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client" // output doesn't work for Vercel
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at    DateTime      @default(now()) @map(name: "created_at")
  updated_at    DateTime      @updatedAt @map(name: "updated_at")
  email         String        @unique
  fullname      String
  password      String        @db.Text
  is_active     Boolean       @default(true)
  is_blocked    Boolean       @default(false)
  role_id       String        @db.Uuid()
  role          Role          @relation(fields: [role_id], references: [id])
  projects      Project[]
  sessions      Session[]
  user_projects UserProject[]
  worklogs      Worklog[]
}

model Role {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @map(name: "created_at")
  updated_at DateTime @updatedAt @map(name: "updated_at")
  name       String
  users      User[]
}

model Session {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at DateTime @default(now()) @map(name: "created_at")
  updated_at DateTime @updatedAt @map(name: "updated_at")
  user_id    String   @db.Uuid()
  user       User     @relation(fields: [user_id], references: [id])
  token      String   @db.Text
  expires_at DateTime
}

model Project {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at    DateTime      @default(now()) @map(name: "created_at")
  updated_at    DateTime      @updatedAt @map(name: "updated_at")
  name          String
  description   String?       @db.Text
  owner_id      String        @db.Uuid()
  owner         User          @relation(fields: [owner_id], references: [id])
  user_projects UserProject[]
  worklogs      Worklog[]
}

model UserProject {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at     DateTime @default(now()) @map(name: "created_at")
  updated_at     DateTime @updatedAt @map(name: "updated_at")
  user_id        String   @db.Uuid()
  user           User     @relation(fields: [user_id], references: [id])
  project_id     String   @db.Uuid()
  project        Project  @relation(fields: [project_id], references: [id])
  remaining_time String
}

model Worklog {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  created_at     DateTime @default(now()) @map(name: "created_at")
  updated_at     DateTime @updatedAt @map(name: "updated_at")
  user_id        String   @db.Uuid()
  user           User     @relation(fields: [user_id], references: [id])
  project_id     String   @db.Uuid()
  project        Project  @relation(fields: [project_id], references: [id])
  worked_at      DateTime
  duration       String
  remaining_time String
  description    String?  @db.Text
  is_billable    Boolean  @default(false)
}
